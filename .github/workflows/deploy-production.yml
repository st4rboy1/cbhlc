name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: mbstring, dom, fileinfo, mysql, iconv
          tools: composer:v2
          coverage: xdebug

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      # Fast-fail: PHP Syntax Check
      - name: PHP Syntax Check
        run: find . -name "*.php" -not -path "./vendor/*" -not -path "./storage/*" | xargs -n1 php -l

      # Cache Composer dependencies for faster builds
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install Node Dependencies
        run: npm ci

      - name: Install Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader --ignore-platform-req=ext-iconv

      - name: Build Assets
        run: npm run build

      - name: Copy Environment File
        run: cp .env.example .env

      - name: Generate Application Key
        run: php artisan key:generate

      # Code Quality Checks
      - name: Code Style Check (Laravel Pint)
        run: ./vendor/bin/pint --test

      - name: Static Analysis (Larastan)
        run: ./vendor/bin/phpstan analyse --memory-limit=2G

      - name: Security Vulnerability Check
        run: composer audit

      # Run tests with code coverage
      - name: Tests with Coverage
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: root
          DB_PASSWORD: password
          XDEBUG_MODE: coverage
        run: ./vendor/bin/pest --coverage --min=60 --coverage-html=coverage --coverage-clover=coverage.xml

      # Upload coverage reports (optional)
      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Deploy to DigitalOcean Droplet
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          ssh -i ~/.ssh/deploy_key ${SSH_USER}@${SSH_HOST} << 'DEPLOYMENT'
            set -e

            echo "=== Starting deployment at $(date) ==="
            cd /home/forge/default

            # Step 1: Enable maintenance mode
            echo "Enabling maintenance mode..."
            php artisan down --retry=60

            # Set trap to disable maintenance mode on any error
            trap 'echo "Error occurred. Disabling maintenance mode..."; php artisan up; exit 1' ERR

            # Step 2: Pull latest code from GitHub
            echo "Pulling latest code..."
            git pull origin main

            # Step 3: Install/update Composer dependencies
            echo "Installing Composer dependencies..."
            composer install --optimize-autoloader --no-dev

            # Step 4: Install/update npm dependencies and build assets
            echo "Installing npm dependencies and building assets..."
            # Clear npm cache to avoid corruption issues
            npm cache clean --force || true
            # Clean install dependencies (will remove node_modules automatically)
            npm ci
            NODE_ENV=production npx vite build

            # Step 5: Run database migrations
            echo "Running database migrations..."
            php artisan migrate --force

            # Step 6: Clear and rebuild caches
            echo "Clearing and rebuilding caches..."
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache

            # Step 7: Restart queue workers (if any)
            echo "Restarting queue workers..."
            php artisan queue:restart || true

            # Step 8: Set correct permissions for forge user
            echo "Setting permissions..."
            chmod -R 755 storage bootstrap/cache
            chown -R forge:forge storage bootstrap/cache

            # Step 9: Disable maintenance mode
            echo "Disabling maintenance mode..."
            php artisan up

            echo "=== Deployment completed successfully at $(date) ==="
          DEPLOYMENT

      - name: Ensure maintenance mode is disabled
        if: failure()
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          ssh -i ~/.ssh/deploy_key ${SSH_USER}@${SSH_HOST} "cd /home/forge/default && php artisan up" || true
          echo "⚠️ Deployment failed - maintenance mode has been disabled"

      - name: Verify deployment
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          # Verify site is responding (using HTTP since HTTPS might not be configured)
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${SSH_HOST})
          if [ $response -eq 200 ] || [ $response -eq 302 ]; then
            echo "✅ Site is responding correctly (HTTP $response)"
          else
            echo "⚠️ Site returned HTTP $response"
            # Don't fail if site returns other codes, just warn
          fi

          # Verify Laravel is running
          ssh -i ~/.ssh/deploy_key ${SSH_USER}@${SSH_HOST} "cd /home/forge/default && php artisan --version"
          echo "✅ Laravel application is running"

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment to production successful!"
            echo "🌐 Site: http://${{ secrets.SSH_HOST }}"
            echo "📦 Commit: ${{ github.sha }}"
            echo "👤 Deployed by: ${{ github.actor }}"
          else
            echo "❌ Deployment to production failed!"
            echo "📦 Commit: ${{ github.sha }}"
            echo "👤 Attempted by: ${{ github.actor }}"
          fi
