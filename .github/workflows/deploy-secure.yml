name: Deploy to Production (Secure)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          tools: composer:v2
          coverage: xdebug

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install PHP Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Install Node Dependencies
        run: npm ci

      - name: Build Assets
        run: npm run build

      - name: Prepare Laravel Application
        run: |
          cp .env.example .env
          php artisan key:generate

      - name: Run Tests
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: root
          DB_PASSWORD: password
        run: ./vendor/bin/pest

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH using Deploy Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Deploy to DigitalOcean Droplet
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          ssh -i ~/.ssh/deploy_key ${SSH_USER}@${SSH_HOST} << 'ENDSSH'
            set -e

            # Navigate to project directory
            cd /home/forge/default

            # Enable maintenance mode
            php artisan down --retry=60

            # Pull latest code
            git fetch origin main
            git reset --hard origin/main

            # Install/update PHP dependencies
            composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev

            # Run database migrations
            php artisan migrate --force

            # Install/update Node dependencies and build assets
            npm ci --ignore-scripts
            npm run build

            # Clear all caches
            php artisan cache:clear
            php artisan config:clear
            php artisan route:clear
            php artisan view:clear

            # Rebuild caches for production
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache

            # Optimize application
            php artisan optimize

            # Set correct permissions (DigitalOcean specific)
            chmod -R 755 storage bootstrap/cache
            chown -R www-data:www-data storage bootstrap/cache

            # Restart queue workers if using queues
            php artisan queue:restart

            # Disable maintenance mode
            php artisan up

            echo "✅ Deployment completed successfully!"
          ENDSSH

      - name: Verify deployment
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.SSH_HOST }})
          if [ $response -eq 200 ]; then
            echo "✅ Site is responding correctly"
          else
            echo "⚠️ Site returned HTTP $response"
            exit 1
          fi

      - name: Clean up SSH keys
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key

      - name: Send deployment notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment ${{ job.status == 'success' && 'succeeded' || 'failed' }} for ${{ github.repository }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Message: ${{ github.event.head_commit.message }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true
