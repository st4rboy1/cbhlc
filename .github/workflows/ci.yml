name: Continuous Integration

on:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - develop
      - feature/*

jobs:
  # Run quality checks and tests in parallel instead of sequentially
  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: mbstring, dom, fileinfo, mysql, iconv
          tools: composer:v2
          coverage: none

      # Fast-fail: PHP Syntax Check
      - name: PHP Syntax Check
        run: find . -name "*.php" -not -path "./vendor/*" -not -path "./storage/*" | xargs -n1 php -l

      # Cache Composer dependencies
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader --ignore-platform-req=ext-iconv --no-scripts

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Node Dependencies
        run: npm ci

      # Code Quality Checks
      - name: Code Style Check (Laravel Pint)
        run: ./vendor/bin/pint --test

      - name: Frontend Format Check (Prettier)
        run: npm run format:check

      - name: Frontend Lint Check (ESLint)
        run: npm run lint:check

      - name: Static Analysis (Larastan)
        run: ./vendor/bin/phpstan analyse --memory-limit=2G

      - name: Security Vulnerability Check
        run: composer audit

  tests:
    name: Tests
    runs-on: ubuntu-latest
    # Run tests in parallel with quality checks instead of waiting
    # needs: quality-checks  # REMOVED to run in parallel

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: mbstring, dom, fileinfo, mysql, iconv, sqlite3, pcov
          tools: composer:v2
          coverage: pcov # Use PCOV for fast coverage (faster than xdebug)

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      # Cache dependencies
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Node Dependencies
        run: npm ci

      - name: Install PHP Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader --ignore-platform-req=ext-iconv --no-scripts

      - name: Build Assets
        run: npm run build

      - name: Copy Environment File
        run: cp .env.example .env

      - name: Generate Application Key
        run: php artisan key:generate

      # Run tests with SQLite and coverage (fast with PCOV)
      - name: Run Tests with Coverage (SQLite + PCOV)
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: ':memory:'
        run: |
          # Run tests with coverage using PCOV (much faster than xdebug)
          ./vendor/bin/pest --parallel --coverage --min=60
