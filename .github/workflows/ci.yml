name: Continuous Integration

on:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - develop
      - feature/*

# Cancel in-progress runs when a new workflow with the same group name is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Build job: Install dependencies and build assets once, share with other jobs
  build:
    name: Build Assets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: mbstring, dom, fileinfo, mysql, iconv
          tools: composer:v2
          coverage: none

      # Cache Composer dependencies
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader --ignore-platform-req=ext-iconv --no-scripts

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Node Dependencies
        run: npm ci

      - name: Build Assets
        run: npm run build

      # Upload built assets and vendor as artifacts for other jobs
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            public/build
            resources/js/routes
            vendor
          retention-days: 1

  # Run quality checks and tests in parallel after build
  quality-checks:
    needs: build
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Download pre-built assets and vendor from build job
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      # Restore executable permissions for vendor binaries
      - name: Restore Executable Permissions
        run: chmod +x vendor/bin/*

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: mbstring, dom, fileinfo, mysql, iconv
          tools: composer:v2
          coverage: none

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Node Dependencies
        run: npm ci

      # Fast-fail: PHP Syntax Check
      - name: PHP Syntax Check
        run: find . -name "*.php" -not -path "./vendor/*" -not -path "./storage/*" | xargs -n1 php -l

      # Cache PHPStan result cache for faster analysis
      - name: Cache PHPStan Results
        uses: actions/cache@v4
        with:
          path: .phpstan.cache
          key: phpstan-${{ github.sha }}
          restore-keys: |
            phpstan-

      # Code Quality Checks
      - name: Code Style Check (Laravel Pint)
        run: ./vendor/bin/pint --test

      - name: Frontend Format Check (Prettier)
        run: npm run format:check

      - name: Frontend Lint Check (ESLint)
        run: npm run lint:check

      - name: Static Analysis (Larastan)
        run: ./vendor/bin/phpstan analyse --memory-limit=2G

      - name: Security Vulnerability Check
        run: composer audit

  tests:
    name: Tests
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Download pre-built assets and vendor from build job
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      # Restore executable permissions for vendor binaries
      - name: Restore Executable Permissions
        run: chmod +x vendor/bin/*

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: mbstring, dom, fileinfo, mysql, iconv, sqlite3, pcov
          tools: composer:v2
          coverage: pcov # Use PCOV for fast coverage (faster than xdebug)

      - name: Copy Environment File
        run: cp .env.example .env

      - name: Generate Application Key
        run: php artisan key:generate

      # Create cache directory for PHPUnit/Pest
      - name: Create Test Cache Directory
        run: mkdir -p .phpunit.cache

      # Run tests with SQLite and coverage (fast with PCOV)
      - name: Run Tests with Coverage (SQLite + PCOV)
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: ':memory:'
        run: |
          # Run tests with coverage using PCOV (much faster than xdebug)
          ./vendor/bin/pest --parallel --coverage --min=60
