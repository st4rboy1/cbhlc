#!/bin/bash

# Exit on any error
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Log directory
LOG_DIR="storage/pre-push-logs"

# Function to get current branch name in snake_case
get_branch_name() {
    git branch --show-current | tr '/' '_' | tr '-' '_'
}

# Function to log command output and manage log rotation
log_command() {
    local command_name=$1
    local branch=$(get_branch_name)
    local timestamp=$(date +%Y_%m_%d_%H_%M_%S)
    local log_file="${LOG_DIR}/${command_name}_${branch}_${timestamp}.log"

    # Create log directory if it doesn't exist
    mkdir -p "$LOG_DIR"

    # Run command and capture output (shift to get actual command)
    shift
    if "$@" > "$log_file" 2>&1; then
        # Keep only latest 5 logs for this command
        ls -t "${LOG_DIR}/${command_name}_"*.log 2>/dev/null | tail -n +6 | xargs rm -f 2>/dev/null || true
        return 0
    else
        # Keep only latest 5 logs for this command
        ls -t "${LOG_DIR}/${command_name}_"*.log 2>/dev/null | tail -n +6 | xargs rm -f 2>/dev/null || true
        echo "$log_file"
        return 1
    fi
}

echo "üöÄ Running pre-push checks..."
echo ""

# Run the local test script
./scripts/test-local.sh

# Run browser smoke tests (fast critical path checks)
# Temporarily disabled - Playwright setup needs configuration
# echo "üåê Running browser smoke tests..."
#
# start_time=$(date +%s.%N)
#
# if log_file=$(log_command "browser-smoke" ./vendor/bin/sail test tests/Browser/VisibleBrowserDemo.php); then
#     end_time=$(date +%s.%N)
#     duration=$(awk "BEGIN {printf \"%.1f\", $end_time - $start_time}")
#     printf "  ${GREEN}‚úÖ Browser Tests: PASSED${NC} (${duration}s)\n"
# else
#     end_time=$(date +%s.%N)
#     duration=$(awk "BEGIN {printf \"%.1f\", $end_time - $start_time}")
#     printf "  ${RED}‚ùå Browser Tests: FAILED${NC} (${duration}s)\n"
#     echo "   See output in: $log_file"
#     echo "   Screenshots saved to: tests/Browser/Screenshots/"
#     echo ""
#     echo "‚ùå Browser smoke tests failed. Push aborted."
#     exit 1
# fi

echo ""

# Run tests with coverage (optimized with SQLite)
echo "üß™ Running tests with coverage check..."

start_time=$(date +%s.%N)

if log_file=$(log_command "pest" ./vendor/bin/sail exec -T -e DB_CONNECTION=sqlite -e DB_DATABASE=:memory: laravel.test ./vendor/bin/pest --parallel --coverage --min=60 --coverage-text); then
    end_time=$(date +%s.%N)
    duration=$(awk "BEGIN {printf \"%.1f\", $end_time - $start_time}")
    printf "  ${GREEN}‚úÖ Tests: PASSED${NC} (${duration}s)\n"
    echo "‚úÖ Coverage: Minimum 60% met"
else
    end_time=$(date +%s.%N)
    duration=$(awk "BEGIN {printf \"%.1f\", $end_time - $start_time}")
    printf "  ${RED}‚ùå Tests: FAILED${NC} (${duration}s)\n"
    echo "   See output in: $log_file"
    echo ""
    echo "‚ùå Tests failed or coverage below 60%. Push aborted."
    exit 1
fi

echo ""
echo "‚úÖ Pre-push checks completed successfully!"
exit 0
